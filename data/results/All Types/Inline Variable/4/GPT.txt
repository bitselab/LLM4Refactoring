The provided `SLMGetExpiredSnapshotsAction` code can be refactored for improved readability, maintainability, and separation of concerns. Below are the identified refactoring opportunities and the corresponding improvements:

---

### **Refactoring Opportunities**

1. **Extract Class**  
   - Extract `ResultsBuilder` into a separate helper class.  
   - Extract snapshot-related logic into `SnapshotUtils`.

2. **Extract Method**  
   - Break down complex methods like `doExecute` into smaller, more focused methods.  
   - Simplify the snapshot filtering logic in `getSnapshotsToDelete`.

3. **Extract Variable**  
   - Extract complex expressions into meaningful variables for clarity.

4. **Rename Method/Variable**  
   - Rename ambiguous methods/variables for better understanding (e.g., `refs` â†’ `listenerCounter`).

5. **Inline Method/Variable**  
   - Inline trivial methods/variables for simplicity.

---

### **Refactored Code**

```java
package org.elasticsearch.xpack.slm;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.elasticsearch.action.*;
import org.elasticsearch.action.support.*;
import org.elasticsearch.common.Strings;
import org.elasticsearch.common.inject.Inject;
import org.elasticsearch.core.Tuple;
import org.elasticsearch.repositories.*;
import org.elasticsearch.snapshots.SnapshotId;
import org.elasticsearch.snapshots.SnapshotState;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.TransportService;
import org.elasticsearch.xpack.core.slm.SnapshotLifecyclePolicy;
import org.elasticsearch.xpack.core.slm.SnapshotRetentionConfiguration;

import java.util.*;
import java.util.concurrent.Executor;
import java.util.stream.Stream;

public class SLMGetExpiredSnapshotsAction extends ActionType<SLMGetExpiredSnapshotsAction.Response> {

    public static final SLMGetExpiredSnapshotsAction INSTANCE = new SLMGetExpiredSnapshotsAction();
    private static final Logger logger = LogManager.getLogger(SLMGetExpiredSnapshotsAction.class);

    private SLMGetExpiredSnapshotsAction() {
        super("cluster:admin/slm/execute/get_expired_snapshots", Writeable.Reader.localOnly());
    }

    public static class LocalAction extends TransportAction<Request, Response> {
        private final RepositoriesService repositoriesService;
        private final Executor retentionExecutor;

        @Inject
        public LocalAction(TransportService transportService, RepositoriesService repositoriesService, ActionFilters actionFilters) {
            super(INSTANCE.name(), actionFilters, transportService.getTaskManager());
            this.repositoriesService = repositoriesService;
            this.retentionExecutor = transportService.getThreadPool().executor(ThreadPool.Names.MANAGEMENT);
        }

        @Override
        protected void doExecute(Task task, Request request, ActionListener<Response> listener) {
            ResultsBuilder resultsBuilder = new ResultsBuilder();
            try (RefCountingRunnable listenerCounter = new RefCountingRunnable(() -> listener.onResponse(resultsBuilder.getResponse()))) {
                request.repositories().forEach(repositoryName -> processRepository(repositoryName, request, resultsBuilder, listenerCounter));
            }
        }

        private void processRepository(String repositoryName, Request request, ResultsBuilder resultsBuilder, RefCountingRunnable listenerCounter) {
            try {
                Repository repository = repositoriesService.repository(repositoryName);
                if (repository.isReadOnly()) {
                    logger.debug("[{}]: skipping readonly repository", repositoryName);
                    return;
                }
                computeExpiredSnapshots(repositoryName, repository, request, resultsBuilder, listenerCounter);
            } catch (RepositoryMissingException e) {
                logger.debug("[{}]: repository not found", repositoryName);
            }
        }

        private void computeExpiredSnapshots(String repositoryName, Repository repository, Request request,
                                             ResultsBuilder resultsBuilder, RefCountingRunnable listenerCounter) {
            retentionExecutor.execute(ActionRunnable.wrap(ActionListener.releaseAfter(ActionListener.runAfter(() -> {}, listenerCounter.acquire()),
                    listener -> repository.getRepositoryData(retentionExecutor, listener)
                            .andThen((l, repoData) -> SnapshotUtils.fetchSnapshotDetails(retentionExecutor, repository, repoData, l))
                            .andThenAccept(details -> resultsBuilder.addResult(
                                    repositoryName,
                                    SnapshotUtils.identifySnapshotsToDelete(repositoryName, request.policies(), details)
                            ))
                            .addListener(listener)
            )));
        }
    }

    static class SnapshotUtils {
        static void fetchSnapshotDetails(Executor executor, Repository repository, RepositoryData repoData, ActionListener<SnapshotDetailsByPolicy> listener) {
            SnapshotDetailsByPolicy details = new SnapshotDetailsByPolicy();
            List<SnapshotId> missingDetails = new ArrayList<>();

            for (SnapshotId snapshotId : repoData.getSnapshotIds()) {
                if (repoData.hasMissingDetails(snapshotId)) {
                    missingDetails.add(snapshotId);
                } else {
                    details.add(snapshotId, Objects.requireNonNull(repoData.getSnapshotDetails(snapshotId)));
                }
            }

            if (missingDetails.isEmpty()) {
                listener.onResponse(details);
            } else {
                repository.getSnapshotInfo(new GetSnapshotInfoContext(missingDetails, false, () -> false,
                        (ignored, info) -> details.add(info.snapshotId(), RepositoryData.SnapshotDetails.fromSnapshotInfo(info)),
                        new ThreadedActionListener<>(executor, listener.map(ignored -> details))));
            }
        }

        static List<Tuple<SnapshotId, String>> identifySnapshotsToDelete(String repositoryName, Map<String, SnapshotLifecyclePolicy> policies, SnapshotDetailsByPolicy details) {
            return details.flatMap((policyName, snapshots) -> {
                SnapshotLifecyclePolicy policy = policies.get(policyName);
                if (policy == null || policy.getRetentionPolicy() == null) {
                    logger.debug("[{}]: policy [{}] has no retention configuration or does not exist", repositoryName, policyName);
                    return Stream.empty();
                }

                return snapshots.entrySet().stream()
                        .filter(entry -> policy.getRetentionPolicy().isSnapshotEligibleForDeletion(entry.getKey(), entry.getValue(), snapshots))
                        .map(entry -> Tuple.tuple(entry.getKey(), policyName));
            }).toList();
        }
    }

    static class ResultsBuilder {
        private final Map<String, List<Tuple<SnapshotId, String>>> results = new HashMap<>();

        void addResult(String repository, List<Tuple<SnapshotId, String>> snapshotsToDelete) {
            if (!snapshotsToDelete.isEmpty()) {
                results.put(repository, snapshotsToDelete);
            }
        }

        Response getResponse() {
            return new Response(Map.copyOf(results));
        }
    }

    static class SnapshotDetailsByPolicy {
        private final Map<String, Map<SnapshotId, RepositoryData.SnapshotDetails>> snapshotsByPolicy = new HashMap<>();

        synchronized void add(SnapshotId snapshotId, RepositoryData.SnapshotDetails details) {
            snapshotsByPolicy.computeIfAbsent(details.getSlmPolicy(), k -> new HashMap<>()).put(snapshotId, details);
        }

        <T> Stream<T> flatMap(BiFunction<String, Map<SnapshotId, RepositoryData.SnapshotDetails>, Stream<T>> fn) {
            return snapshotsByPolicy.entrySet().stream().flatMap(entry -> fn.apply(entry.getKey(), entry.getValue()));
        }
    }

    public static final class Request extends ActionRequest {
        private final Collection<String> repositories;
        private final Map<String, SnapshotLifecyclePolicy> policies;

        public Request(Collection<String> repositories, Map<String, SnapshotLifecyclePolicy> policies) {
            this.repositories = repositories;
            this.policies = policies;
        }

        public Collection<String> repositories() {
            return repositories;
        }

        public Map<String, SnapshotLifecyclePolicy> policies() {
            return policies;
        }

        @Override
        public ActionRequestValidationException validate() {
            return null;
        }
    }

    public static final class Response extends ActionResponse {
        private final Map<String, List<Tuple<SnapshotId, String>>> snapshotsToDelete;

        public Response(Map<String, List<Tuple<SnapshotId, String>>> snapshotsToDelete) {
            this.snapshotsToDelete = snapshotsToDelete;
        }

        public Map<String, List<Tuple<SnapshotId, String>>> snapshotsToDelete() {
            return snapshotsToDelete;
        }
    }
}
```

---

### **Refactoring Summary**

1. **Extract Class:**  
   - Moved snapshot processing logic into `SnapshotUtils`.  
   - Moved result-building logic into `ResultsBuilder`.

2. **Extract Method:**  
   - Simplified `doExecute` by creating `processRepository` and `computeExpiredSnapshots`.

3. **Rename Variable:**  
   - Renamed `refs` to `listenerCounter` for better clarity.

4. **Extract Variable:**  
   - Improved readability by extracting complex expressions.

---

### **Benefits**

- **Readability:** Clearer structure and responsibilities.  
- **Maintainability:** Easier to extend or modify snapshot logic.  
- **Reusability:** Utility methods in `SnapshotUtils` can be reused.

Let me know if you'd like further improvements!