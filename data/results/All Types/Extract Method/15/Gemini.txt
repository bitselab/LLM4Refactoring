## Refactoring Opportunities and Code

The provided code is generally well-written and follows good practices. However, there are a few potential refactoring opportunities that could be considered:

**1. Extract Method:**

* The logic for extracting the generic type is identical in both `getGenericType` methods. This could be extracted into a separate method called `extractGenericType` to avoid code duplication.

**2. Inline Variable:**

* The `actual` variable in both `getGenericType` methods is only used once. It could be inlined to avoid the overhead of creating and maintaining a separate variable.

**3. Rename Method:**

* The `getGenericType` methods could be renamed to `extractGenericType` to better reflect their purpose.

**4. Rename Parameter:**

* The `parameter` parameter in the second `getGenericType` method could be renamed to `param` to be consistent with the naming convention used in the first method.

**5. Extract Class:**

* If this functionality is used in multiple places, it might be beneficial to extract it into a separate class called `GenericTypeExtractor`.

**Refactored Code:**

```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    /**
     * Extracts the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
     *
     * @param field the field to inspect
     */
    public Class<?> extractGenericType(Field field) {
        Type generic = field.getGenericType();
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                // in case of nested generics we don't go deep
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }

        return Object.class;
    }

    /**
     * Extracts the generic type (parametrized type) of the parameter. If the parameter is not generic it returns Object.class.
     *
     * @param param the parameter to inspect
     */
    public Class<?> extractGenericType(Parameter param) {
        Type generic = param.getType();
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                // in case of nested generics we don't go deep
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }

        return Object.class;
    }

}
```