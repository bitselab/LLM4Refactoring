### **Refactoring Opportunities Identified**

1. **Extract Method**  
   - The `isEqual()` method is too long and can be simplified.  
   - The logic inside the test methods (e.g., repeated `ReflectionTestUtils.getField()` usage) can be extracted.  
   - `getFilterChainProxy()` has nested logic that can be extracted for clarity.

2. **Extract Variable**  
   - Repetitive calls like `context.getBean(ClientRegistrationRepository.class)` can be stored in a variable for better readability.

3. **Rename Method**  
   - Rename `isEqual()` to `areClientRegistrationsEqual()` for clarity.

4. **Inline Method**  
   - Inline trivial methods or one-liners that add unnecessary indirection.

---

### **Refactored Code**

```java
package org.springframework.boot.autoconfigure.security.oauth2.client.servlet;

import java.util.ArrayList;
import java.util.List;

import jakarta.servlet.Filter;
import org.junit.jupiter.api.Test;

import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;
import org.springframework.boot.test.context.FilteredClassLoader;
import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;
import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.BeanIds;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationCodeGrantFilter;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;
import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.web.filter.CompositeFilter;

import static org.assertj.core.api.Assertions.assertThat;

class OAuth2WebSecurityConfigurationTests {

    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner();

    @Test
    void securityConfigurerConfiguresOAuth2Login() {
        runContextWithClientConfig((context) -> {
            verifyClientRegistrationEquality(context, OAuth2LoginAuthenticationFilter.class);
        });
    }

    @Test
    void securityConfigurerConfiguresAuthorizationCode() {
        runContextWithClientConfig((context) -> {
            verifyClientRegistrationEquality(context, OAuth2AuthorizationCodeGrantFilter.class);
        });
    }

    @Test
    void securityConfigurerBacksOffWhenClientRegistrationBeanAbsent() {
        runContextWithoutClientConfig((context) -> {
            assertNoFiltersConfigured(context, OAuth2LoginAuthenticationFilter.class, OAuth2AuthorizationCodeGrantFilter.class);
        });
    }

    @Test
    void configurationRegistersAuthorizedClientServiceBean() {
        runContextWithClientConfig((context) -> assertThat(context).hasSingleBean(OAuth2AuthorizedClientService.class));
    }

    @Test
    void configurationRegistersAuthorizedClientRepositoryBean() {
        runContextWithClientConfig((context) -> assertThat(context).hasSingleBean(OAuth2AuthorizedClientRepository.class));
    }

    // Helper Methods for Refactoring

    private void runContextWithClientConfig(AssertableWebApplicationContext.Consumer consumer) {
        this.contextRunner
                .withUserConfiguration(ClientRegistrationRepositoryConfiguration.class, OAuth2WebSecurityConfiguration.class)
                .run(consumer);
    }

    private void runContextWithoutClientConfig(AssertableWebApplicationContext.Consumer consumer) {
        this.contextRunner.withUserConfiguration(TestConfig.class, OAuth2WebSecurityConfiguration.class).run(consumer);
    }

    private void verifyClientRegistrationEquality(AssertableWebApplicationContext context, Class<? extends Filter> filterClass) {
        ClientRegistrationRepository expectedRepo = context.getBean(ClientRegistrationRepository.class);
        ClientRegistrationRepository actualRepo = extractClientRegistrationRepository(context, filterClass);

        assertThat(areClientRegistrationsEqual(expectedRepo.findByRegistrationId("first"), actualRepo.findByRegistrationId("first"))).isTrue();
        assertThat(areClientRegistrationsEqual(expectedRepo.findByRegistrationId("second"), actualRepo.findByRegistrationId("second"))).isTrue();
    }

    private ClientRegistrationRepository extractClientRegistrationRepository(AssertableWebApplicationContext context, Class<? extends Filter> filterClass) {
        return (ClientRegistrationRepository) ReflectionTestUtils.getField(getFilters(context, filterClass).get(0), "clientRegistrationRepository");
    }

    private void assertNoFiltersConfigured(AssertableWebApplicationContext context, Class<? extends Filter>... filters) {
        for (Class<? extends Filter> filter : filters) {
            assertThat(getFilters(context, filter)).isEmpty();
        }
    }

    private List<Filter> getFilters(AssertableWebApplicationContext context, Class<? extends Filter> filterClass) {
        return getSecurityFilterChain(context).getFilters().stream().filter(filterClass::isInstance).toList();
    }

    private SecurityFilterChain getSecurityFilterChain(AssertableWebApplicationContext context) {
        Filter springSecurityFilterChain = context.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class);
        return extractSecurityFilterChain(springSecurityFilterChain);
    }

    private SecurityFilterChain extractSecurityFilterChain(Filter filter) {
        if (filter instanceof FilterChainProxy proxy) {
            return proxy.getFilterChains().get(0);
        }
        if (filter instanceof CompositeFilter composite) {
            return composite.getFilters().stream()
                    .filter(FilterChainProxy.class::isInstance)
                    .map(FilterChainProxy.class::cast)
                    .map(proxy -> proxy.getFilterChains().get(0))
                    .findFirst()
                    .orElseThrow(() -> new IllegalStateException("No FilterChainProxy found"));
        }
        throw new IllegalStateException("No FilterChainProxy found");
    }

    private boolean areClientRegistrationsEqual(ClientRegistration reg1, ClientRegistration reg2) {
        return ObjectUtils.nullSafeEquals(reg1.getClientId(), reg2.getClientId()) &&
               ObjectUtils.nullSafeEquals(reg1.getClientName(), reg2.getClientName()) &&
               ObjectUtils.nullSafeEquals(reg1.getClientSecret(), reg2.getClientSecret()) &&
               ObjectUtils.nullSafeEquals(reg1.getScopes(), reg2.getScopes());
    }

    @Configuration(proxyBeanMethods = false)
    @EnableWebSecurity
    static class TestConfig {
        @Bean
        TomcatServletWebServerFactory tomcat() {
            return new TomcatServletWebServerFactory(0);
        }
    }

    @Configuration(proxyBeanMethods = false)
    @Import(TestConfig.class)
    static class ClientRegistrationRepositoryConfiguration {
        @Bean
        ClientRegistrationRepository clientRegistrationRepository() {
            List<ClientRegistration> registrations = List.of(
                    createClientRegistration("first", "https://user-info-uri.com"),
                    createClientRegistration("second", "https://other-user-info")
            );
            return new InMemoryClientRegistrationRepository(registrations);
        }

        private ClientRegistration createClientRegistration(String id, String userInfoUri) {
            return ClientRegistration.withRegistrationId(id)
                    .clientName("foo")
                    .clientId("foo")
                    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
                    .scope("read")
                    .clientSecret("secret")
                    .redirectUri("https://redirect-uri.com")
                    .authorizationUri("https://authorization-uri.com")
                    .tokenUri("https://token-uri.com")
                    .userInfoUri(userInfoUri)
                    .userNameAttributeName("login")
                    .build();
        }
    }
}
```

---

### **Summary of Refactoring**

1. **Extracted Methods:** Simplified test logic by extracting setup and assertion logic.  
2. **Renamed Method:** Renamed `isEqual()` to `areClientRegistrationsEqual()` for clarity.  
3. **Extracted Variable:** Repeated `context.getBean()` calls were extracted for readability.  
4. **Simplified Filter Retrieval:** Consolidated logic for filter extraction.