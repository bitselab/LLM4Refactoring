Here are some refactoring opportunities for the provided code:

1. **Reduce Code Duplication:**
   - The logic for retrieving the `MockitoSettings` annotation can be extracted into a separate method to avoid code duplication in `beforeEach`.

2. **Simplify `retrieveAnnotationFromTestClasses`:**
   - The `do-while` loop in `retrieveAnnotationFromTestClasses` can be simplified using a more concise approach like streams or recursion.

3. **Consider Encapsulation:**
   - The creation and storage of the `Set<Mock>` in `beforeEach` could be encapsulated within a dedicated method for better organization.

4. **Descriptive Variable Names:**
   - Consider using more descriptive names for variables like `testInstances` or `actualStrictness` to enhance readability.

Here's the refactored code incorporating the suggestions:

```java
package org.mockito.junit.jupiter;

import static org.junit.jupiter.api.extension.ExtensionContext.Namespace.create;
import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Stream;

import org.junit.jupiter.api.extension.AfterEachCallback;
import org.junit.jupiter.api.extension.BeforeEachCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolutionException;
import org.junit.jupiter.api.extension.ParameterResolver;
import org.mockito.Mockito;
import org.mockito.MockitoSession;
import org.mockito.ScopedMock;
import org.mockito.internal.configuration.plugins.Plugins;
import org.mockito.internal.session.MockitoSessionLoggerAdapter;
import org.mockito.junit.jupiter.resolver.CaptorParameterResolver;
  // ... other imports

public class MockitoExtension implements BeforeEachCallback, AfterEachCallback, ParameterResolver {

  private final static Namespace MOCKITO = create("org.mockito");
  private final static String SESSION = "session", MOCKS = "mocks";
  private final Strictness strictness;
  private final ParameterResolver parameterResolver;

  public MockitoExtension() {
    this(Strictness.STRICT_STUBS);
  }

  private MockitoExtension(Strictness strictness) {
    this.strictness = strictness;
    this.parameterResolver = new CompositeParameterResolver(
        new MockParameterResolver(),
        new CaptorParameterResolver()
    );
  }

  @Override
  public void beforeEach(final ExtensionContext context) {
    List<Object> testInstances = context.getRequiredTestInstances().getAllInstances();
    Strictness actualStrictness = findMockitoSettingsFromTestClasses(context)
        .orElse(strictness);

    MockitoSession session = Mockito.mockitoSession()
        .initMocks(testInstances.toArray())
        .strictness(actualStrictness)
        .logger(new MockitoSessionLoggerAdapter(Plugins.getMockitoLogger()))
        .startMocking();

    context.getStore(MOCKITO).put(MOCKS, new HashSet<>());
    context.getStore(MOCKITO).put(SESSION, session);
  }

  private Optional<MockitoSettings> findMockitoSettingsFromTestClasses(final ExtensionContext context) {
    return Stream.iterate(context, ExtensionContext::getParent)
        .limit(context.getRoot().getDepth() + 1) // +1 to include current context
        .filter(ctx -> ctx != context.getRoot())
        .map(ctx -> findAnnotation(ctx.getElement(), MockitoSettings.class))
        .filter(Optional::isPresent)
        .findFirst()
        .orElse(Optional.empty());
  }

  // ... other methods (afterEach, supportsParameter, resolveParameter)
}
```

These are some suggestions, and the importance of each might depend on your team's preferences and coding standards. 