The provided code snippet can benefit from a few refactoring improvements for better clarity and maintainability. The primary focus here should be on reducing redundancy and improving readability. The `getGenericType` methods for `Field` and `Parameter` objects share a similar structure and logic. This suggests that a common method can be extracted to handle the shared logic. Here's the refactored code:

```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    /**
     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
     *
     * @param field the field to inspect
     */
    public Class<?> getGenericType(Field field) {
        return getGenericTypeFromType(field.getGenericType());
    }

    /**
     * Resolves the type (parametrized type) of the parameter. If the field is not generic it returns Object.class.
     *
     * @param parameter the parameter to inspect
     */
    public Class<?> getGenericType(Parameter parameter) {
        return getGenericTypeFromType(parameter.getParameterizedType());
    }

    /**
     * Extracted common logic for determining the generic type from a Type instance.
     * 
     * @param type the type to inspect
     * @return the generic class, or Object.class if not parametrized
     */
    private Class<?> getGenericTypeFromType(Type type) {
        if (type instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) type).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                // in case of nested generics we don't go deep
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }

        return Object.class;
    }
}
```

Key Changes:
1. **Extract Method**: The common logic for extracting the generic type is moved to a private method `getGenericTypeFromType`. This method takes a `Type` object and processes it, reducing redundancy in the code.
2. **Simplifying the Public Methods**: Both `getGenericType` methods for `Field` and `Parameter` now leverage the extracted method, thereby simplifying their implementations.

This refactoring improves the code by adhering to the DRY (Don't Repeat Yourself) principle, making it easier to maintain and modify in the future.