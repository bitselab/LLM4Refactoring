The code snippet provided is a good candidate for the "Extract Method" refactoring technique, as it contains duplicate code in both `getGenericType(Field field)` and `getGenericType(Parameter parameter)` methods. The logic for extracting the generic type is identical in both methods, and thus can be extracted into a separate method to reduce redundancy and improve maintainability.

Here's the refactored code:

```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    /**
     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
     *
     * @param field the field to inspect
     */
    public Class<?> getGenericType(Field field) {
        return getGenericTypeFromType(field.getGenericType());
    }

    /**
     * Resolves the type (parametrized type) of the parameter. If the parameter is not generic it returns Object.class.
     *
     * @param parameter the parameter to inspect
     */
    public Class<?> getGenericType(Parameter parameter) {
        return getGenericTypeFromType(parameter.getParameterizedType());
    }

    /**
     * Extracted common logic for determining the generic type from a Type instance.
     * 
     * @param type the type to inspect
     * @return the generic class, or Object.class if not parametrized
     */
    private Class<?> getGenericTypeFromType(Type type) {
        if (type instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) type).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                // in case of nested generics we don't go deep
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }
        return Object.class;
    }
}
```

Refactoring Details:
1. **Extract Method**: The common logic for determining the generic type is extracted into a private method `getGenericTypeFromType(Type type)`.
2. **Simplify Public Methods**: Both `getGenericType` methods now call `getGenericTypeFromType`, simplifying their logic and ensuring that changes in the future only need to be made in one place.

This refactoring adheres to the DRY (Don't Repeat Yourself) principle, making the code more maintainable and easier to understand.