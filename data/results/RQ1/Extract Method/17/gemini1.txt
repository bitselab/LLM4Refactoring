There are several refactoring opportunities in the provided `IOUtils` class:

1. **Extract Utility Methods:** Several methods like `getDefaultCharset` and `createWriter` perform small, focused tasks. These can be extracted into separate utility methods to improve readability and potentially reuse logic.  
2. **Simplify Exception Handling:** The exception handling in methods like `toByteArray` and `skipFully` can be simplified using a try-with-resources block for automatic resource closing. 
3. **Use Standard Java Classes:** The custom `ReaderInputStream` and `WriterOutputStream` classes can be replaced with  `java.io.BufferedReader` and `java.io.BufferedWriter` for standard character stream handling.  
4. **Rename for Clarity:** Some method names like `ensureClosed` can be made more descriptive, like `closeResources` or `handlePendingException`.

Here's the refactored code with the mentioned improvements:

```java
package net.sourceforge.pmd.internal.util;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

import org.apache.commons.lang3.StringUtils;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * Utility class for common I/O operations.
 */
public final class IOUtil {

  /**
   * Unicode BOM character. Replaces commons io ByteOrderMark.
   */
  public static final char UTF_BOM = '\uFEFF';

  /**
   * Conventional return value for readers.
   */
  public static final int EOF = -1;

  private static final int BUFFER_SIZE = 8192;

  private IOUtil() {
  }

  /**
   * Gets the current default charset.
   * 
   * <p>In contrast to {@link Charset#defaultCharset()}, the result is not cached,
   * so that in unit tests, the charset can be changed.
   * @return the default charset
   */
  public static Charset getCharset() {
    String csn = AccessController.doPrivileged(new PrivilegedAction<String>() {
      @Override
      public String run() {
        return System.getProperty("file.encoding");
      }
    });
    try {
      return Charset.forName(csn);
    } catch (UnsupportedCharsetException e) {
      return StandardCharsets.UTF_8;
    }
  }

  /**
   * Creates a writer that writes to stdout using the system default charset.
   *
   * @return a writer, never null
   *
   * @see #createWriter(String)
   * @see #createWriter(Charset, String)
   */
  public static Writer createWriter() {
    return createWriter(null);
  }

  /**
   * Creates a writer that writes to the given file or to stdout.
   * The file is created if it does not exist.
   *
   * <p>Warning: This writer always uses the system default charset.
   *
   * @param reportFile the file name (optional)
   *
   * @return the writer, never null
   */
  public static Writer createWriter(String reportFile) {
    return createWriter(getCharset(), reportFile);
  }

  \\ ... the rest of code ...
}