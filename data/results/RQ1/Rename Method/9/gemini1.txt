## Refactoring Opportunities in DescriptorsGenerator:

The provided code for DescriptorsGenerator has several areas for improvement through refactoring. Here's a breakdown of potential changes:

**1. Extract Data Class for Module Information:**

Instead of scattered properties throughout the `ModuleNode` class, create a dedicated data class `ModuleInfo` encapsulating information like `rootDir`, `descriptor`, `declaredPackages`, `requiredPackages`, `dependencies`, etc. This improves readability and maintainability.

**2. Refactor `collectDependencies`:**

- Combine logic for processing `ModuleOrderEntry` and `LibraryOrderEntry` into a single function for clearer separation of concerns.
- Refactor logic for finding library nodes to a separate helper function.
- Consider using streams for iterating and processing collections within the method to improve conciseness.

**3. Refactor `prepareModuleInfos`:**

- You can potentially combine steps for identifying required packages and adding exports into a single loop processing `ModuleInfo` objects.

**4. Refactor `createFile`:**

- Extract property setting logic into a separate function to enhance code organization.
- Consider using `CodeStyleManager.getInstance(project).applyStyleGuides(moduleInfoFile)` instead of manually calling reformat for better style handling.

**Here's an example refactored snippet demonstrating some of these changes (focusing on data class and property extraction):**

```java
class ModuleInfo {
  private final PsiDirectory rootDir;
  private final ModuleNode moduleNode;
  private final List<String> declaredPackages;
  private final List<String> requiredPackages;
  private final Map<ModuleInfo, Set<DependencyType>> dependencies;
  // ... other properties and methods

  public ModuleInfo(PsiDirectory rootDir, ModuleNode moduleNode) {
    this.rootDir = rootDir;
    this.moduleNode = moduleNode;
    // ... initialize other properties based on moduleNode data
  }

  // ... getter and setter methods for properties
}

// Usage in prepareModuleInfos:
List<ModuleInfo> moduleInfos = new ArrayList<>();
for (ModuleNode moduleNode : modules) {
  PsiDirectory rootDir = moduleNode.getRootDir();
  if (rootDir != null) {
    ModuleInfo moduleInfo = new ModuleInfo(rootDir, moduleNode);
    // ... populate moduleInfo properties
    moduleInfos.add(moduleInfo);
  }
  // ...
}
```

**Remember:** These are just a few suggestions. A comprehensive refactoring would involve going through the entire code and applying similar improvements throughout.

**Additionally:**

- Consider using Optional<T> for nullable references like `descriptor` in `ModuleNode` for clarity.
- Review exception handling (`createFile`) to potentially use more specific exceptions.

**No Refactoring Necessary:**

While refactoring can improve readability and maintainability, some parts of the code might already be well-structured and don't require immediate changes. You can prioritize refactoring areas that seem most complex or error-prone. 