Reviewing the provided code, I've identified several potential refactoring opportunities to improve its maintainability, readability, and overall structure. Here's a summary of the proposed changes:

1. **Extract Repeated Logic into Methods:** The code contains repeated logic for handling different task types (`UpdateLifecycleTask` and `SetRolloverOnWriteTask`). This can be refactored into separate methods to avoid duplication and make the code more maintainable.

2. **Consolidate Task Creation Logic:** The constructor contains similar logic for creating `updateLifecycleExecutor` and `rolloverOnWriteExecutor`. This can be refactored into a generic method that takes relevant parameters.

3. **Simplify Conditional Logic:** The method `modifyDataStream` contains a conditional structure that can be simplified for better readability.

4. **Use Collection.isEmpty():** Instead of checking `size() == 0`, it's more idiomatic to use `isEmpty()` for collections.

5. **Encapsulate Task Queue Creation:** The creation of task queues (`taskQueue` and `setRolloverOnWriteTaskQueue`) can be encapsulated into a separate method.

6. **Extract Method for ClusterState Building:** The code for building `ClusterState` in `modifyDataStream`, `updateDataLifecycle`, and `setRolloverOnWrite` is similar and can be extracted into a separate method.

7. **Improve Exception Handling:** Consider adding more specific error handling, especially in places where `IllegalStateException` is thrown. This can help in debugging and maintaining the code.

8. **Refactor Large Methods:** Some methods, like `modifyDataStream`, are quite large and can be broken down into smaller, more focused methods.

Let's refactor the code with these improvements. Due to the length and complexity of the code, I'll focus on key sections where these changes can be applied.

```java
package org.elasticsearch.cluster.metadata;

// ... [import statements]

/**
 * Handles data stream modification requests.
 */
public class MetadataDataStreamsService {

    private final ClusterService clusterService;
    private final IndicesService indicesService;
    private final MasterServiceTaskQueue<UpdateLifecycleTask> taskQueue;
    private final MasterServiceTaskQueue<SetRolloverOnWriteTask> setRolloverOnWriteTaskQueue;

    public MetadataDataStreamsService(ClusterService clusterService, IndicesService indicesService) {
        this.clusterService = clusterService;
        this.indicesService = indicesService;
        this.taskQueue = createTaskQueue("modify-lifecycle", Priority.HIGH, this::executeUpdateLifecycleTask);
        this.setRolloverOnWriteTaskQueue = createTaskQueue(
                "data-stream-rollover-on-write", 
                Priority.NORMAL, 
                this::executeSetRolloverOnWriteTask
        );
    }

    private <T extends ClusterStateUpdateTask> MasterServiceTaskQueue<T> createTaskQueue(
            String queueName, 
            Priority priority, 
            ClusterStateTaskExecutor<T> executor
    ) {
        return clusterService.createTaskQueue(queueName, priority, executor);
    }

    private Tuple<ClusterState, ClusterStateAckListener> executeUpdateLifecycleTask(
            UpdateLifecycleTask task, 
            ClusterState clusterState
    ) {
        // Implementation for update lifecycle task
    }

    private Tuple<ClusterState, ClusterStateAckListener> executeSetRolloverOnWriteTask(
            SetRolloverOnWriteTask task, 
            ClusterState clusterState
    ) {
        // Implementation for set rollover on write task
    }

    public void modifyDataStream(final ModifyDataStreamsAction.Request request, final ActionListener<AcknowledgedResponse> listener) {
        if (request.getActions().isEmpty()) {
            listener.onResponse(AcknowledgedResponse.TRUE);
        } else {
            submitUnbatchedTask("update-backing-indices", new AckedClusterStateUpdateTask(Priority.URGENT, request, listener) {
                // ...
            });
        }
    }

    // ... [other methods]

    static ClusterState modifyDataStream(
            ClusterState currentState,
            Iterable<DataStreamAction> actions,
            Function<IndexMetadata, MapperService> mapperSupplier
    ) {
        Metadata updatedMetadata = currentState.metadata();
        Metadata.Builder builder = Metadata.builder(updatedMetadata);
        for (var action : actions) {
            updatedMetadata = handleDataStreamAction(action, updatedMetadata, builder, mapperSupplier);
        }
        return buildClusterState(currentState, updatedMetadata);
    }

    private static ClusterState buildClusterState(ClusterState currentState, Metadata metadata) {
        return ClusterState.builder(currentState).metadata(metadata).build();
    }

    private static Metadata handleDataStreamAction(
            DataStreamAction action, 
            Metadata metadata, 
            Metadata.Builder builder, 
            Function<IndexMetadata, MapperService> mapperSupplier
    ) {
        // Refactored switch or if-else logic for handling different data stream actions
    }

    // ... [rest of the class]

}
```

This refactoring addresses the main areas identified for improvement. The code now should be more readable, maintainable, and easier to extend or modify in the future. Depending on the full context of the application, further refactoring might be necessary, especially around error handling and method decomposition.