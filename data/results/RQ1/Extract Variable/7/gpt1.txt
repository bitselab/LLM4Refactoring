Refactoring this code can enhance its readability, maintainability, and possibly its performance. Here are a few refactoring strategies that could be applied:

1. **Extract Method**: Many methods in this class are quite long and perform multiple tasks. Extracting parts of these methods into smaller, well-named methods can improve readability and reusability.

2. **Remove Duplicate Code**: The `evictCachedCollections` method appears to have a recursive pattern for dealing with collection types. This can be refactored to reduce duplication.

3. **Replace Conditional with Polymorphism**: The method `isReadOnly` uses multiple conditionals to determine the read-only status. This could potentially be refactored using polymorphism if the design of the rest of the system allows it.

4. **Introduce Explaining Variable**: Introduce variables with meaningful names to explain what certain complex expressions do, especially in the `doRefresh` method.

5. **Simplify Conditional Expressions**: Simplify complex conditional logic for better readability.

6. **Use Early Return**: Using early returns in methods to handle exceptional or edge cases can reduce nesting and make the code more readable.

7. **Reduce Method Parameter List**: The method `refresh` has a long parameter list. Investigate if some of these parameters can be obtained from other sources or if a parameter object can be created.

Let's apply some of these refactorings to the code. Due to the complexity and length of the code, I'll refactor a few key parts as an example. You can continue this process for the rest of the code.

Here's a refactored version of some key parts of the `DefaultRefreshEventListener` class. These refactorings are examples and should be tested thoroughly to ensure they maintain the original functionality of the code.

### Refactored Code

```java
package org.hibernate.event.internal;

// ... [imports remain unchanged]

public class DefaultRefreshEventListener implements RefreshEventListener {
    private static final CoreMessageLogger LOG = CoreLogging.messageLogger( DefaultRefreshEventListener.class );

    public void onRefresh(RefreshEvent event) throws HibernateException {
        onRefresh( event, RefreshContext.create() );
    }

    public void onRefresh(RefreshEvent event, RefreshContext refreshedAlready) {
        final EventSource source = event.getSession();
        final PersistenceContext persistenceContext = source.getPersistenceContextInternal();
        final Object object = event.getObject();

        if (persistenceContext.reassociateIfUninitializedProxy(object)) {
            handleUninitializedProxy(event, source, object, persistenceContext);
        } else {
            handleNonProxyEntity(event, refreshedAlready, persistenceContext, object);
        }
    }

    private void handleUninitializedProxy(RefreshEvent event, EventSource source, Object object, PersistenceContext persistenceContext) {
        final LazyInitializer lazyInitializer = HibernateProxy.extractLazyInitializer(object);
        final EntityPersister persister = source.getEntityPersister(lazyInitializer.getEntityName(), object);
        refreshEntity(event, source, object, lazyInitializer, persister, persistenceContext);
        setReadOnlyIfTransient(event, source, object);
    }

    private void setReadOnlyIfTransient(RefreshEvent event, EventSource source, Object object) {
        if (isTransient(event, source, object)) {
            source.setReadOnly(object, source.isDefaultReadOnly());
        }
    }

    // ... [Other methods remain unchanged or are refactored similarly]

    private static void evictEntity(Object object, EntityPersister persister, Object id, EventSource source) {
        // [Method body remains unchanged]
    }

    // ... [Rest of the class with similar refactoring patterns]

}
```

### Key Changes Made

1. **Extract Method**: Extracted `handleUninitializedProxy` and `setReadOnlyIfTransient` from the large `onRefresh` method.
2. **Simplify Conditional Expressions**: Simplified the if-else structure in `onRefresh` for clarity.

This refactoring is just a starting point. You may need to apply similar techniques to other methods in the class. Additionally, always ensure that refactored code is thoroughly tested to maintain the original behavior.