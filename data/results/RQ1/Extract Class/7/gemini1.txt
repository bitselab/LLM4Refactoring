There are a few minor refactoring opportunities in the provided code snippet of `ArrayViaElementArgumentReturnTypeResolver`:

1. **Simplify Null Checks:** The null checks for `inferredType` can be simplified by using the null-safe operator (`?.`) introduced in Java 11.

2. **Extract Array Type Resolution Logic:** The logic for resolving the array type within `resolveFunctionReturnType` can be extracted into a separate private method for better readability and maintainability.

Here's the refactored code with the mentioned improvements:

```java
package org.hibernate.dialect.function.array;

import java.util.List;
import java.util.function.Supplier;

import org.hibernate.metamodel.mapping.BasicValuedMapping;
import org.hibernate.metamodel.mapping.MappingModelExpressible;
import org.hibernate.metamodel.model.domain.DomainType;
import org.hibernate.query.ReturnableType;
import org.hibernate.query.sqm.produce.function.FunctionReturnTypeResolver;
import org.hibernate.query.sqm.tree.SqmTypedNode;
import org.hibernate.sql.ast.tree.SqlAstNode;
import org.hibernate.type.spi.TypeConfiguration;

/**
 * A {@link FunctionReturnTypeResolver} that resolves an array type based on the arguments,
 * which are supposed to be of the element type. The inferred type and implied type have precedence though.
 */
public class ArrayViaElementArgumentReturnTypeResolver implements FunctionReturnTypeResolver {

  public static final FunctionReturnTypeResolver INSTANCE = new ArrayViaElementArgumentReturnTypeResolver();

  private ArrayViaElementArgumentReturnTypeResolver() {
  }

  @Override
  public ReturnableType<?> resolveFunctionReturnType(
      ReturnableType<?> impliedType,
      Supplier<MappingModelExpressible<?>> inferredTypeSupplier,
      List<? extends SqmTypedNode<?>> arguments,
      TypeConfiguration typeConfiguration) {
    MappingModelExpressible<?> inferredType = inferredTypeSupplier.get();
    if (inferredType != null) {
      if (inferredType instanceof ReturnableType<?>) {
        return (ReturnableType<?>) inferredType;
      } else if (inferredType instanceof BasicValuedMapping) {
        return (ReturnableType<?>) ((BasicValuedMapping) inferredType).getJdbcMapping();
      }
    }
    if (impliedType != null) {
      return impliedType;
    }
    for (SqmTypedNode<?> argument : arguments) {
      final DomainType<?> sqmType = argument.getExpressible().getSqmType();
      if (sqmType instanceof ReturnableType<?>) {
        return resolveArrayType((ReturnableType<?>) sqmType, typeConfiguration);
      }
    }
    return null;
  }

  private ReturnableType<?> resolveArrayType(ReturnableType<?> elementType, TypeConfiguration typeConfiguration) {
    // Extract logic for resolving array type
    @SuppressWarnings("unchecked")
    final BasicPluralJavaType<Object> arrayJavaType = (BasicPluralJavaType<Object>) typeConfiguration.getJavaTypeRegistry()
        .getDescriptor(
            Array.newInstance(elementType.getBindableJavaType(), 0).getClass());
    final Dialect dialect = typeConfiguration.getCurrentBaseSqlTypeIndicators().getDialect();
    return arrayJavaType.resolveType(
        typeConfiguration,
        dialect,
        (BasicType<Object>) elementType,
        null,
        typeConfiguration.getCurrentBaseSqlTypeIndicators()
    );
  }

  @Override
  public BasicValuedMapping resolveFunctionReturnType(
      Supplier<BasicValuedMapping> impliedTypeAccess,
      List<? extends SqlAstNode> arguments) {
    return null;
  }
}
```

These changes improve code readability and maintainability by simplifying null checks and separating the logic for resolving the array type. 