private void testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings(final Locale locale) {
  Objects.requireNonNull(locale, "locale");
  assumeFalse(LocaleUtils.isLanguageUndetermined(locale), () -> toFailureMessage(locale, null));
  assumeTrue(LocaleUtils.isAvailableLocale(locale), () -> toFailureMessage(locale, null));

  final String localeString = locale.toString();  // Extracted variable
  final String[][] zones = ArraySorter.sort(DateFormatSymbols.getInstance(locale).getZoneStrings(), Comparator.comparing(array -> array[0]));
  for (final String[] zone : zones) {
    for (int zIndex = 1; zIndex < zone.length; ++zIndex) {
      final String tzDisplay = zone[zIndex];
      if (tzDisplay == null) {
        break;
      }
      final TimeZone timeZone = TimeZone.getDefault();
      final FastDateParser parser = new FastDateParser("z", timeZone, locale);
      // An exception will be thrown and the test will fail if parsing isn't successful
      try {
        parser.parse(tzDisplay);
      } catch (ParseException e) {
        // How do I know I'm on GH?
        if (SystemUtils.IS_JAVA_17 && Arrays.binarySearch(FAILS_ON_GH_JAVA_17, localeString) > 0) {
          Java17Failures.add(locale);
          // Mark as an assumption failure instead of a hard fail
          System.err.println("Java 17 - Mark as an assumption failure instead of a hard fail: " + localeString);
          assumeTrue(false, localeString);
          continue;
        }
        final String msg = String.format("%s: with locale = %s, zIndex = %,d, tzDisplay = '%s', parser = '%s'", e, localeString, zIndex, tzDisplay, parser.toString());
        fail(msg, e);
      }
    }
  }
}
