Here's the refactored code using the Extract Variable refactoring:

```java
public void testProfileDfs() throws Exception {
  String textField = "text_field";
  String numericField = "number";
  String vectorField = "vector";
  String indexName = "text-dfs-profile";
  createIndex(indexName, vectorField);
  ensureGreen();

  int numDocs = randomIntBetween(10, 50);
  IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs];
  for (int i = 0; i < numDocs; i++) {
    docs[i] = prepareIndex(indexName).setId(String.valueOf(i))
        .setSource(
            textField,
            English.intToEnglish(i),
            numericField,
            i,
            vectorField,
            createRandomVector()
        );
  }
  indexRandom(true, docs);
  refresh();
  int iters = between(5, 10);
  for (int i = 0; i < iters; i++) {
    QueryBuilder q = randomQueryBuilder(List.of(textField), List.of(numericField), numDocs, 3);
    if (randomBoolean()) {
      new KnnSearchBuilder(
          vectorField,
          createRandomVector(),
          randomIntBetween(5, 10),
          50,
          randomBoolean() ? null : randomFloat()
      ).addFilterQuery(q);
    }
    logger.info("Query: {}", q);
    assertResponse(
        prepareSearch().setQuery(q)
            .setTrackTotalHits(true)
            .setProfile(true)
            .setSearchType(SearchType.DFS_QUERY_THEN_ FETCH)
            .setKnnSearch(randomList(2, 5, this::createRandomKnnSearchBuilder)),
        response -> {
          assertNotNull("Profile response element should not be null", response.getProfileResults());
          assertThat("Profile response should not be an empty array", response.getProfileResults().size(), not(0));
          for (Map.Entry<String, SearchProfileShardResult> shard : response.getProfileResults().entrySet()) {
            for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {
              for (ProfileResult result : searchProfiles.getQueryResults()) {
                assertNotNull(result.getQueryName());
                assertNotNull(result.getLuceneDescription());
                assertThat(result.getTime(), greaterThan(0L));
              }
              CollectorResult result = searchProfiles.getCollectorResult();
              assertThat(result.getName(), is(not(emptyOrNullString())));
              assertThat(result.getTime(), greaterThan(0L));
            }
            SearchProfileDfsPhaseResult searchProfileDfsPhaseResult = shard.getValue().getSearchProfileDfsPhaseResult();
            assertThat(searchProfileDfsPhaseResult, is(notNullValue()));
            for (QueryProfileShardResult queryProfileShardResult : searchProfileDfsPhaseResult.getQueryProfileShardResult()) {
              for (ProfileResult result : queryProfileShardResult.getQueryResults()) {
                assertNotNull(result.getQueryName());
                assertNotNull(result.getLuceneDescription());
                assertThat(result.getTime(), greaterThan(0L));
              }
              CollectorResult result = queryProfileShardResult.getCollectorResult();
              assertThat(result.getName(), is(not(emptyOrNullString())));
              assertThat(result.getTime(), greaterThan(0L));
            }
            ProfileResult statsResult = searchProfileDfsPhaseResult.getDfsShardResult();
            assertThat(statsResult.getQueryName(), equalTo("statistics"));
          }
        }
    );
  }
}

private float[] createRandomVector() {
  return new float[] { randomFloat(), randomFloat(), randomFloat() };
}

private KnnSearchBuilder createRandomKnnSearchBuilder() {
  return new KnnSearchBuilder(
      vectorField,
      createRandomVector(),
      randomIntBetween(5, 10),
      50,
      randomBoolean() ? null : randomFloat()
  );
}
```

**Explanation:**

1. **Extracted Variable:** The repeated expression `new float[] { randomFloat(), randomFloat(), randomFloat() }` is extracted into two separate methods: `createRandomVector` and `createRandomKnnSearchBuilder`. These methods encapsulate the logic of creating a random vector and a KnnSearchBuilder with a random vector, respectively.
2. **Method Reference:** In `setKnnSearch`, instead of repeating the lambda