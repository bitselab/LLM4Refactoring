 **Here's the refactored code incorporating extract class refactorings:**

```java
package org.apache.solr.util.circuitbreaker;

import java.lang.invoke.MethodHandles;
import org.apache.solr.common.util.NamedList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Single CircuitBreaker that registers both a Memory and a CPU CircuitBreaker. This is only for
 * backward compatibility with the 9.x versions prior to 9.4.
 *
 * @deprecated Use individual Circuit Breakers instead
 */
@Deprecated(since = "9.4")
public class CircuitBreakerManager extends CircuitBreaker {
  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
  private boolean cpuEnabled;
  private boolean memEnabled;
  private int memThreshold = 100;
  private int cpuThreshold = 100;
  private MemoryCircuitBreaker memCB;
  private CPUCircuitBreaker cpuCB;

  private final CircuitBreakerRegistry circuitBreakerRegistry = new CircuitBreakerRegistry();

  public CircuitBreakerManager() {
    super();
  }

  // ... other methods (excluding those related to circuitBreakerList)

  @Override
  public boolean isTripped() {
    return (memEnabled && memCB.isTripped()) || (cpuEnabled && cpuCB.isTripped()) || circuitBreakerRegistry.checkAnyTripped();
  }

  @Override
  public String getDebugInfo() {
    StringBuilder sb = new StringBuilder();
    if (memEnabled) {
      sb.append(memCB.getDebugInfo()).append("\n");
    }
    if (cpuEnabled) {
      sb.append(cpuCB.getDebugInfo());
    }
    sb.append(circuitBreakerRegistry.getDebugInfo());
    return sb.toString();
  }

  @Override
  public String getErrorMessage() {
    StringBuilder sb = new StringBuilder();
    if (memEnabled) {
      sb.append(memCB.getErrorMessage());
    }
    if (memEnabled && cpuEnabled) {
      sb.append("\n");
    }
    if (cpuEnabled) {
      sb.append(cpuCB.getErrorMessage());
    }
    sb.append(circuitBreakerRegistry.toErrorMessage());
    return sb.toString();
  }

  @Override
  public void init(NamedList<?> args) {
    super.init(args);
    log.warn("CircuitBreakerManager is deprecated. Use individual Circuit Breakers instead");
    if (memEnabled) {
      memCB = new MemoryCircuitBreaker();
      memCB.setThreshold(memThreshold);
    }
    if (cpuEnabled) {
      cpuCB = new CPUCircuitBreaker();
      cpuCB.setThreshold(cpuThreshold);
    }
  }

  // ... other methods (unchanged)
}

class CircuitBreakerRegistry {
  private final List<CircuitBreaker> circuitBreakerList = new ArrayList<>();

  public void register(CircuitBreaker circuitBreaker) {
    circuitBreakerList.add(circuitBreaker);
  }

  @VisibleForTesting
  public void deregisterAll() {
    circuitBreakerList.clear();
  }

  public List<CircuitBreaker> checkTripped() {
    // ... implementation (unchanged)
  }

  public boolean checkAnyTripped() {
    // ... implementation (unchanged)
  }

  public static String toErrorMessage(List<CircuitBreaker> circuitBreakerList) {
    // ... implementation (unchanged)
  }

  public boolean isEnabled() {
    return !circuitBreakerList.isEmpty();
  }

  @VisibleForTesting
  public List<CircuitBreaker> getRegisteredCircuitBreakers() {
    return circuitBreakerList;
  }
}
```
