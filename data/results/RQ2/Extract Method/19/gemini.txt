Here's the refactored code of `PulsarPropertiesMapper` with the extracted method:

```java
package org.springframework.boot.autoconfigure.pulsar;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.apache.pulsar.client.admin.PulsarAdminBuilder;
import org.apache.pulsar.client.api.ClientBuilder;
import org.apache.pulsar.client.api.ConsumerBuilder;
import org.apache.pulsar.client.api.ProducerBuilder;
import org.apache.pulsar.client.api.PulsarClientException.UnsupportedAuthenticationException;
import org.apache.pulsar.client.api.ReaderBuilder;
import org.apache.pulsar.common.util.ObjectMapperFactory;

import org.springframework.boot.context.properties.PropertyMapper;
import org.springframework.pulsar.listener.PulsarContainerProperties;
import org.springframework.pulsar.reader.PulsarReaderContainerProperties;
import org.springframework.util.StringUtils;

/**
 * Helper class used to map {@link PulsarProperties} to various builder customizers.
 *
 * @author Chris Bono
 * @author Phillip Webb
 */
final class PulsarPropertiesMapper {

  private final PulsarProperties properties;

  PulsarPropertiesMapper(PulsarProperties properties) {
    this.properties = properties;
  }

  void customizeClientBuilder(ClientBuilder clientBuilder, PulsarConnectionDetails connectionDetails) {
    PulsarProperties.Client properties = this.properties.getClient();
    PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
    map.from(connectionDetails::getBrokerUrl).to(clientBuilder::serviceUrl);
    map.from(properties::getConnectionTimeout).to(timeoutProperty(clientBuilder::connectionTimeout));
    map.from(properties::getOperationTimeout).to(timeoutProperty(clientBuilder::operationTimeout));
    map.from(properties::getLookupTimeout).to(timeoutProperty(clientBuilder::lookupTimeout));
    customizeAuthentication(clientBuilder::authentication, properties.getAuthentication());
  }

  void customizeAdminBuilder(PulsarAdminBuilder adminBuilder, PulsarConnectionDetails connectionDetails) {
    PulsarProperties.Admin properties = this.properties.getAdmin();
    PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();
    map.from(connectionDetails::getAdminUrl).to(adminBuilder::serviceHttpUrl);
    map.from(properties::getConnectionTimeout).to(timeoutProperty(adminBuilder::connectionTimeout));
    map.from(properties::getReadTimeout).to(timeoutProperty(adminBuilder::readTimeout));
    map.from(properties::getRequestTimeout).to(timeoutProperty(adminBuilder::requestTimeout));
    customizeAuthentication(adminBuilder::authentication, properties.getAuthentication());
  }

  private void customizeAuthentication(AuthenticationConsumer authentication,
                                      PulsarProperties.Authentication properties) {
    if (StringUtils.hasText(properties.getPluginClassName())) {
      try {
        String authParamString = convertAuthParamsToString(properties.getParams());
        authentication.accept(properties.getPluginClassName(), authParamString);
      } catch (UnsupportedAuthenticationException ex) {
        throw new IllegalStateException("Unable to configure Pulsar authentication", ex);
      }
    }
  }

  // Extracted method to convert and handle exceptions
  private String convertAuthParamsToString(Map<String, String> params) {
    Map<String, String> sortedParams = new TreeMap<>(params);
    try {
      return ObjectMapperFactory.create().writeValueAsString(sortedParams);
    } catch (Exception ex) {
      throw new IllegalStateException("Could not convert auth parameters to encoded string", ex);
    }
  }
}