 **Here's the refactored code after applying extract method refactoring:**

```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    private Class<?> resolveGenericType(Type generic) {
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                // in case of nested generics we don't go deep
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }

        return Object.class;
    }

    /**
     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
     *
     * @param field the field to inspect
     */
    public Class<?> getGenericType(Field field) {
        return resolveGenericType(field.getGenericType());
    }

    /**
     * Resolves the type (parametrized type) of the parameter. If the field is not generic it returns Object.class.
     *
     * @param parameter the parameter to inspect
     */
    public Class<?> getGenericType(Parameter parameter) {
        return resolveGenericType(parameter.getType());
    }
}
```

**Explanation of the changes:**

1. **Extract Method:** The duplicate code snippet was extracted into a new private method named `resolveGenericType`.
2. **Parameter:** The `resolveGenericType` method takes a `Type` object as its argument, allowing it to be used with both `Field` and `Parameter` objects.
3. **Method Calls:** The original duplicate code blocks in `getGenericType(Field)` and `getGenericType(Parameter)` have been replaced with calls to `resolveGenericType`.
4. **Readability and Reusability:** This refactoring improves code readability by removing duplication and makes the logic more reusable by encapsulating it in a separate method.
