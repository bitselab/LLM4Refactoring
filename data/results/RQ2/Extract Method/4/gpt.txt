The provided code snippet shows a clear case for applying an Extract Method refactoring to remove the duplicated logging logic. This refactoring will improve readability and maintainability by encapsulating the logging functionality in a separate method. 

I'll refactor the code to extract the logging functionality into its own method, which will be called each time the logging needs to occur. This approach avoids repetition and makes the code cleaner.

Here's the refactored code:

```java
package org.elasticsearch.transport;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.elasticsearch.common.Strings;
import org.elasticsearch.common.settings.SecureString;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.set.Sets;
import org.elasticsearch.core.Nullable;

import java.util.Collections;
import java.util.Map;
import java.util.Set;

import static org.elasticsearch.transport.RemoteClusterService.REMOTE_CLUSTER_CREDENTIALS;

public class RemoteClusterCredentialsManager {
    private static final Logger logger = LogManager.getLogger(RemoteClusterCredentialsManager.class);

    private volatile Map<String, SecureString> clusterCredentials = Collections.emptyMap();

    public RemoteClusterCredentialsManager(Settings settings) {
        updateClusterCredentials(settings);
    }

    public final synchronized UpdateRemoteClusterCredentialsResult updateClusterCredentials(Settings settings) {
        final Map<String, SecureString> newClusterCredentials = REMOTE_CLUSTER_CREDENTIALS.getAsMap(settings);
        
        if (clusterCredentials.isEmpty()) {
            clusterCredentials = newClusterCredentials;
            logCredentialsUpdate();
            return new UpdateRemoteClusterCredentialsResult(Set.copyOf(newClusterCredentials.keySet()), Collections.emptySet());
        }

        final Set<String> addedClusterAliases = Sets.difference(newClusterCredentials.keySet(), clusterCredentials.keySet());
        final Set<String> removedClusterAliases = Sets.difference(clusterCredentials.keySet(), newClusterCredentials.keySet());
        clusterCredentials = newClusterCredentials;
        logCredentialsUpdate();
        assert Sets.haveEmptyIntersection(removedClusterAliases, addedClusterAliases);
        return new UpdateRemoteClusterCredentialsResult(addedClusterAliases, removedClusterAliases);
    }

    private void logCredentialsUpdate() {
        logger.debug(
                () -> Strings.format(
                        "Updated remote cluster credentials for clusters: [%s]",
                        Strings.collectionToCommaDelimitedString(clusterCredentials.keySet())
                )
        );
    }

    public record UpdateRemoteClusterCredentialsResult(Set<String> addedClusterAliases, Set<String> removedClusterAliases) {}

    @Nullable
    public SecureString resolveCredentials(String clusterAlias) {
        return clusterCredentials.get(clusterAlias);
    }

    public boolean hasCredentials(String clusterAlias) {
        return clusterCredentials.containsKey(clusterAlias);
    }

    public static final RemoteClusterCredentialsManager EMPTY = new RemoteClusterCredentialsManager(Settings.EMPTY);
}
```

Changes made:
- Extracted the duplicated logging logic into a private method `logCredentialsUpdate`.
- Replaced the duplicated logging statements in `updateClusterCredentials` with calls to `logCredentialsUpdate`.

This refactoring streamlines the code by removing duplication and centralizing the logging logic, making the code more maintainable and readable.