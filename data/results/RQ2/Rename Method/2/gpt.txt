To improve the readability and clarity of the method `doEndOfFile`, we can rename it to more accurately reflect its purpose and behavior. From the method's implementation, it appears that its primary function is to handle the end-of-file (EOF) condition by setting the `eof` flag, potentially throwing an `EOFException`, and returning the EOF indicator. A more descriptive name for this method could be `handleEndOfFile` or `processEndOfFile`. 

Here's the refactored code with the renamed method:

```java
package org.apache.commons.io.input;

import static org.apache.commons.io.IOUtils.EOF;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;

public class NullInputStream extends InputStream {
    // ... [other class members]

    /**
     * Handles End of File.
     *
     * @return {@code -1} if {@code throwEofException} is set to {@code false}
     * @throws EOFException if {@code throwEofException} is set to {@code true}.
     */
    private int handleEndOfFile() throws EOFException {
        eof = true;
        checkThrowEof("handleEof()");
        return EOF;
    }

    // ... [rest of the class methods, including the read() method where handleEndOfFile() is called]

    /**
     * Reads a byte.
     *
     * @return Either The byte value returned by {@code processByte()} or {@code -1} if the end of file has been reached and {@code throwEofException} is set to
     *         {@code false}.
     * @throws EOFException if the end of file is reached and {@code throwEofException} is set to {@code true}.
     * @throws IOException  if trying to read past the end of file.
     */
    @Override
    public int read() throws IOException {
        if (eof) {
            checkThrowEof("read()");
            return EOF;
        }
        if (position == size) {
            return handleEndOfFile();
        }
        position++;
        return processByte();
    }

    // ... [other methods where handleEndOfFile() should replace doEndOfFile()]
}
```

In this refactored code, the method `doEndOfFile` is renamed to `handleEndOfFile`, which is more descriptive of the actions performed within the method. The call to this method in the `read()` method (and any other places it might be called) is updated accordingly. This renaming makes the purpose of the method clearer to anyone reading or maintaining the code.