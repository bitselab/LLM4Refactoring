Extract class refactorings are frequently employed to decompose complex classes to improve readability.
##################################################
An extract class refactoring pattern is to extract a few attributes and/or methods as a new class to decompose this class. Here is an example of the extract class refactoring that follows this pattern.
The source code before refactoring is:
```
public class ScanTargetPattern {
    private File _directory;
    private List<String> _includes = Collections.emptyList();
    private List<String> _excludes = Collections.emptyList();

    /**
     * @return the _directory
     */
    public File getDirectory() {
        return _directory;
    }

    /**
     * @param directory the directory to set
     */
    public void setDirectory(File directory) {
        this._directory = directory;
    }

    public void setIncludes(List<String> includes) {
        _includes= includes;
    }

    public void setExcludes(List<String> excludes) {
        _excludes = excludes;
    }

    public List<String> getIncludes() {
        return _includes;
    }

    public List<String> getExcludes() {
        return _excludes;
    }

}
```
The source code after refactoring is:
```
public class ScanPattern {
    private List<String> _includes = Collections.emptyList();
    private List<String> _excludes = Collections.emptyList();

    public void setIncludes(List<String> includes) {
        _includes = includes;
    }

    public void setExcludes(List<String> excludes) {
        _excludes = excludes;
    }

    public List<String> getIncludes() {
        return _includes;
    }

    public List<String> getExcludes() {
        return _excludes;
    }
}

public class ScanTargetPattern {
    private File _directory;
    private ScanPattern _pattern;

    /**
     * @return the _directory
     */
    public File getDirectory() {
        return _directory;
    }

    /**
     * @param directory the directory to set
     */
    public void setDirectory(File directory) {
        this._directory = directory;
    }

    public void setIncludes(List<String> includes) {
        if (_pattern == null)
            _pattern = new ScanPattern();
        _pattern.setIncludes(includes);
    }

    public void setExcludes(List<String> excludes) {
        if (_pattern == null)
            _pattern = new ScanPattern();
        _pattern.setExcludes(excludes);
    }

    public List<String> getIncludes() {
        return (_pattern == null ? Collections.emptyList() : _pattern.getIncludes());
    }

    public List<String> getExcludes() {
        return (_pattern == null ? Collections.emptyList() : _pattern.getExcludes());
    }

}
```
In this example, the developer extracted the following attributes and methods:
```
private List<String> _includes = Collections.emptyList();
private List<String> _excludes = Collections.emptyList();

public void setIncludes(List<String> includes) {
    _includes = includes;
}

public void setExcludes(List<String> excludes) {
    _excludes = excludes;
}

public List<String> getIncludes() {
    return _includes;
}

public List<String> getExcludes() {
    return _excludes;
}
```
as new class "ScanPattern".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential extract class refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
package org.hibernate.dialect.function.array;

import java.util.List;
import java.util.function.Supplier;

import org.hibernate.metamodel.mapping.BasicValuedMapping;
import org.hibernate.metamodel.mapping.MappingModelExpressible;
import org.hibernate.metamodel.model.domain.DomainType;
import org.hibernate.query.ReturnableType;
import org.hibernate.query.sqm.produce.function.FunctionReturnTypeResolver;
import org.hibernate.query.sqm.tree.SqmTypedNode;
import org.hibernate.sql.ast.tree.SqlAstNode;
import org.hibernate.type.spi.TypeConfiguration;

/**
 * A {@link FunctionReturnTypeResolver} that resolves an array type based on the arguments,
 * which are supposed to be of the element type. The inferred type and implied type have precedence though.
 */
public class ArrayViaElementArgumentReturnTypeResolver implements FunctionReturnTypeResolver {

    public static final FunctionReturnTypeResolver INSTANCE = new ArrayViaElementArgumentReturnTypeResolver();

    private ArrayViaElementArgumentReturnTypeResolver() {
    }

    @Override
    public ReturnableType<?> resolveFunctionReturnType(
            ReturnableType<?> impliedType,
            Supplier<MappingModelExpressible<?>> inferredTypeSupplier,
            List<? extends SqmTypedNode<?>> arguments,
            TypeConfiguration typeConfiguration) {
        final MappingModelExpressible<?> inferredType = inferredTypeSupplier.get();
        if ( inferredType != null ) {
            if ( inferredType instanceof ReturnableType<?> ) {
                return (ReturnableType<?>) inferredType;
            }
            else if ( inferredType instanceof BasicValuedMapping ) {
                return (ReturnableType<?>) ( (BasicValuedMapping) inferredType ).getJdbcMapping();
            }
        }
        if ( impliedType != null ) {
            return impliedType;
        }
        for ( SqmTypedNode<?> argument : arguments ) {
            final DomainType<?> sqmType = argument.getExpressible().getSqmType();
            if ( sqmType instanceof ReturnableType<?> ) {
                return ArrayTypeHelper.resolveArrayType( sqmType, typeConfiguration );
            }
        }
        return null;
    }

    @Override
    public BasicValuedMapping resolveFunctionReturnType(
            Supplier<BasicValuedMapping> impliedTypeAccess,
            List<? extends SqlAstNode> arguments) {
        return null;
    }

    @SuppressWarnings("unchecked")
    public static BasicType<?> resolveArrayType(DomainType<?> elementType, TypeConfiguration typeConfiguration) {
        @SuppressWarnings("unchecked") final BasicPluralJavaType<Object> arrayJavaType = (BasicPluralJavaType<Object>) typeConfiguration.getJavaTypeRegistry()
                .getDescriptor(
                        Array.newInstance( elementType.getBindableJavaType(), 0 ).getClass()
                );
        final Dialect dialect = typeConfiguration.getCurrentBaseSqlTypeIndicators().getDialect();
        return arrayJavaType.resolveType(
                typeConfiguration,
                dialect,
                (BasicType<Object>) elementType,
                null,
                typeConfiguration.getCurrentBaseSqlTypeIndicators()
        );
    }
}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.