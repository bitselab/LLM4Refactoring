Extract class refactorings are frequently employed to decompose complex classes to improve readability.
##################################################
An extract class refactoring pattern is to extract a few attributes and/or methods as a new class to decompose this class. Here is an example of the extract class refactoring that follows this pattern.
The source code before refactoring is:
```
public class ScanTargetPattern {
    private File _directory;
    private List<String> _includes = Collections.emptyList();
    private List<String> _excludes = Collections.emptyList();

    /**
     * @return the _directory
     */
    public File getDirectory() {
        return _directory;
    }

    /**
     * @param directory the directory to set
     */
    public void setDirectory(File directory) {
        this._directory = directory;
    }

    public void setIncludes(List<String> includes) {
        _includes= includes;
    }

    public void setExcludes(List<String> excludes) {
        _excludes = excludes;
    }

    public List<String> getIncludes() {
        return _includes;
    }

    public List<String> getExcludes() {
        return _excludes;
    }

}
```
The source code after refactoring is:
```
public class ScanPattern {
    private List<String> _includes = Collections.emptyList();
    private List<String> _excludes = Collections.emptyList();

    public void setIncludes(List<String> includes) {
        _includes = includes;
    }

    public void setExcludes(List<String> excludes) {
        _excludes = excludes;
    }

    public List<String> getIncludes() {
        return _includes;
    }

    public List<String> getExcludes() {
        return _excludes;
    }
}

public class ScanTargetPattern {
    private File _directory;
    private ScanPattern _pattern;

    /**
     * @return the _directory
     */
    public File getDirectory() {
        return _directory;
    }

    /**
     * @param directory the directory to set
     */
    public void setDirectory(File directory) {
        this._directory = directory;
    }

    public void setIncludes(List<String> includes) {
        if (_pattern == null)
            _pattern = new ScanPattern();
        _pattern.setIncludes(includes);
    }

    public void setExcludes(List<String> excludes) {
        if (_pattern == null)
            _pattern = new ScanPattern();
        _pattern.setExcludes(excludes);
    }

    public List<String> getIncludes() {
        return (_pattern == null ? Collections.emptyList() : _pattern.getIncludes());
    }

    public List<String> getExcludes() {
        return (_pattern == null ? Collections.emptyList() : _pattern.getExcludes());
    }

}
```
In this example, the developer extracted the following attributes and methods:
```
private List<String> _includes = Collections.emptyList();
private List<String> _excludes = Collections.emptyList();

public void setIncludes(List<String> includes) {
    _includes = includes;
}

public void setExcludes(List<String> excludes) {
    _excludes = excludes;
}

public List<String> getIncludes() {
    return _includes;
}

public List<String> getExcludes() {
    return _excludes;
}
```
as new class "ScanPattern".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential extract class refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
package org.springframework.boot.autoconfigure.transaction;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.ReactiveTransactionManager;
import org.springframework.transaction.TransactionManager;
import org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.reactive.TransactionalOperator;
import org.springframework.transaction.support.TransactionOperations;
import org.springframework.transaction.support.TransactionTemplate;

/**
 * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration
 * Auto-configuration} for Spring transaction.
 *
 * @author Stephane Nicoll
 * @since 1.3.0
 */
@AutoConfiguration
@ConditionalOnClass(PlatformTransactionManager.class)
@EnableConfigurationProperties(TransactionProperties.class)
public class TransactionAutoConfiguration {

    @Bean
    @ConditionalOnMissingBean
    TransactionManagerCustomizers platformTransactionManagerCustomizers(
            ObjectProvider<PlatformTransactionManagerCustomizer<?>> customizers) {
        return new TransactionManagerCustomizers(customizers.orderedStream().toList());
    }

    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnSingleCandidate(ReactiveTransactionManager.class)
    public TransactionalOperator transactionalOperator(ReactiveTransactionManager transactionManager) {
        return TransactionalOperator.create(transactionManager);
    }

    @Configuration(proxyBeanMethods = false)
    @ConditionalOnSingleCandidate(PlatformTransactionManager.class)
    public static class TransactionTemplateConfiguration {

        @Bean
        @ConditionalOnMissingBean(TransactionOperations.class)
        public TransactionTemplate transactionTemplate(PlatformTransactionManager transactionManager) {
            return new TransactionTemplate(transactionManager);
        }

    }

    @Configuration(proxyBeanMethods = false)
    @ConditionalOnBean(TransactionManager.class)
    @ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)
    public static class EnableTransactionManagementConfiguration {

        @Configuration(proxyBeanMethods = false)
        @EnableTransactionManagement(proxyTargetClass = false)
        @ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "false")
        public static class JdkDynamicAutoProxyConfiguration {

        }

        @Configuration(proxyBeanMethods = false)
        @EnableTransactionManagement(proxyTargetClass = true)
        @ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",
                matchIfMissing = true)
        public static class CglibAutoProxyConfiguration {

        }

    }

}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.