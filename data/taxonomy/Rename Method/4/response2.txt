In the provided code snippet, renaming methods could be considered to enhance readability and maintain consistency in naming conventions. Below are the proposed refactorings for the `SpatialCoordinateTypes` enum:

1. Rename methods to consistently use the "to" or "as" prefix to indicate conversion:
   - `longAsPoint` suggests a conversion, so it's well-named.
   - `pointAsLong` is also clear in its conversion purpose.
   - `wkbAsLong` could be renamed to `wkbToLong` to align with a more standard conversion naming scheme.
   - `longAsWkb` could be renamed to `longToWkb` for consistency.
   - `asWkt` is clear, but to align with other method names, it could be renamed to `geometryToWkt`.
   - `pointAsWKB` might be better named as `geometryToPointWKB` to clarify the input type.
   - `wktToWkb` is clear and consistent.
   - `wkbToWkt` is also clear and consistent.

Here's the refactored code with the suggested method name changes:

```java
public enum SpatialCoordinateTypes {

    public abstract Point longAsPoint(long encoded);

    public abstract long pointAsLong(double x, double y);

    public long wkbToLong(BytesRef wkb) {
        
    }

    public BytesRef longToWkb(long encoded) {
        
    }

    public String geometryToWkt(Geometry geometry) {
    
    }

    public BytesRef geometryToPointWKB(Geometry geometry) {
        return new BytesRef(WellKnownBinary.toWKB(geometry, ByteOrder.LITTLE_ENDIAN));
    }

    public BytesRef wktToWkb(String wkt) {
        
    }

    public String wkbToWkt(BytesRef wkb) {
        
    }
}
```

These changes aim to unify the method names around common conversion terms ("to" and "as"), which should enhance readability and make the API's purpose more transparent.