Inline method refactorings are frequently employed to eliminate unnecessary methods to improve readability.
##################################################
An inline method refactoring pattern is to remove methods with only a few statements. Here is an example of the inline method refactoring that follows this pattern.
The source code before refactoring is:
```
private final class OpenSslSession implements SSLSession, ApplicationProtocolAccessor {

    public Principal getLocalPrincipal() {
        Certificate[] local = getLocalCertificates();
        if (local == null || local.length == 0) {
            return null;
        }
        return principal(local);
    }

    private Principal principal(Certificate[] certs) {
        return ((java.security.cert.X509Certificate) certs[0]).getIssuerX500Principal();
    }

}
```
The source code after refactoring is:
```
private final class OpenSslSession implements SSLSession, ApplicationProtocolAccessor {

    public Principal getLocalPrincipal() {
        Certificate[] local = getLocalCertificates();
        if (local == null || local.length == 0) {
            return null;
        }
        return ((java.security.cert.X509Certificate) local[0]).getIssuerX500Principal();
    }

}
```
In this example, the developer removed the unnecessary method "principal".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential inline method refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
private static class ContextualFailureCollectorImpl extends NonRootFailureCollector implements ContextualFailureCollector {

    private void doAdd(Throwable failure, String failureMessage) {
        StringJoiner contextJoiner = new StringJoiner( CommonEventContextMessages.INSTANCE.contextSeparator() );
        appendContextTo( contextJoiner );
        log.newCollectedFailure( root.process, contextJoiner.toString(), failure );

        doAdd(failureMessage);
    }

    private void doAdd(String failureMessage) {
        if ( root.shouldAddFailure() ) {
            failureMessages.add( failureMessage );
        }
    }
}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.