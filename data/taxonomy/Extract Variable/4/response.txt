### Refactored Code

I have identified several repeated expressions in the provided code that can benefit from extract variable refactoring. Here are the refactored segments of the code:

1. Extracted `vectorField` initialization in the `KnnSearchBuilder`.
2. Extracted `new float[] { randomFloat(), randomFloat(), randomFloat() }` in several places.

```java
package org.elasticsearch.search.profile.dfs;

import org.apache.lucene.tests.util.English;
import org.elasticsearch.action.index.IndexRequestBuilder;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.search.profile.ProfileResult;
import org.elasticsearch.search.profile.SearchProfileDfsPhaseResult;
import org.elasticsearch.search.profile.SearchProfileShardResult;
import org.elasticsearch.search.profile.query.CollectorResult;
import org.elasticsearch.search.profile.query.QueryProfileShardResult;
import org.elasticsearch.search.vectors.KnnSearchBuilder;
import org.elasticsearch.test.ESIntegTestCase;
import org.elasticsearch.xcontent.XContentFactory;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import static org.elasticsearch.search.profile.query.RandomQueryGenerator.randomQueryBuilder;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertResponse;
import static org.hamcrest.Matchers.emptyOrNullString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;

public class DfsProfilerIT extends ESIntegTestCase {

    private static final int KNN_DIM = 3;

    public void testProfileDfs() throws Exception {
        String textField = "text_field";
        String numericField = "number";
        String vectorField = "vector";
        String indexName = "text-dfs-profile";
        createIndex(indexName, vectorField);
        ensureGreen();

        int numDocs = randomIntBetween(10, 50);
        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs];
        for (int i = 0; i < numDocs; i++) {
            docs[i] = prepareIndex(indexName).setId(String.valueOf(i))
                    .setSource(
                            textField,
                            English.intToEnglish(i),
                            numericField,
                            i,
                            vectorField,
                            new float[] { randomFloat(), randomFloat(), randomFloat() }
                    );
        }
        indexRandom(true, docs);
        refresh();
        int iters = between(5, 10);
        for (int i = 0; i < iters; i++) {
            QueryBuilder q = randomQueryBuilder(List.of(textField), List.of(numericField), numDocs, 3);
            if (randomBoolean()) {
                float[] randomVector = new float[] { randomFloat(), randomFloat(), randomFloat() };
                KnnSearchBuilder knnSearchBuilder = new KnnSearchBuilder(
                        vectorField,
                        randomVector,
                        randomIntBetween(5, 10),
                        50,
                        randomBoolean() ? null : randomFloat()
                );
                knnSearchBuilder.addFilterQuery(q);
            }
            logger.info("Query: {}", q);
            List<KnnSearchBuilder> knnSearchBuilders = randomList(2, 5, () -> {
                float[] randomVector = new float[] { randomFloat(), randomFloat(), randomFloat() };
                return new KnnSearchBuilder(
                        vectorField,
                        randomVector,
                        randomIntBetween(5, 10),
                        50,
                        randomBoolean() ? null : randomFloat()
                );
            });
            assertResponse(
                    prepareSearch().setQuery(q)
                            .setTrackTotalHits(true)
                            .setProfile(true)
                            .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                            .setKnnSearch(knnSearchBuilders),
                    response -> {
                        assertNotNull("Profile response element should not be null", response.getProfileResults());
                        assertThat("Profile response should not be an empty array", response.getProfileResults().size(), not(0));
                        for (Map.Entry<String, SearchProfileShardResult> shard : response.getProfileResults().entrySet()) {
                            for (QueryProfileShardResult searchProfiles : shard.getValue().getQueryProfileResults()) {
                                for (ProfileResult result : searchProfiles.getQueryResults()) {
                                    assertNotNull(result.getQueryName());
                                    assertNotNull(result.getLuceneDescription());
                                    assertThat(result.getTime(), greaterThan(0L));
                                }
                                CollectorResult result = searchProfiles.getCollectorResult();
                                assertThat(result.getName(), is(not(emptyOrNullString())));
                                assertThat(result.getTime(), greaterThan(0L));
                            }
                            SearchProfileDfsPhaseResult searchProfileDfsPhaseResult = shard.getValue().getSearchProfileDfsPhaseResult();
                            assertThat(searchProfileDfsPhaseResult, is(notNullValue()));
                            for (QueryProfileShardResult queryProfileShardResult : searchProfileDfsPhaseResult.getQueryProfileShardResult()) {
                                for (ProfileResult result : queryProfileShardResult.getQueryResults()) {
                                    assertNotNull(result.getQueryName());
                                    assertNotNull(result.getLuceneDescription());
                                    assertThat(result.getTime(), greaterThan(0L));
                                }
                                CollectorResult result = queryProfileShardResult.getCollectorResult();
                                assertThat(result.getName(), is(not(emptyOrNullString())));
                                assertThat(result.getTime(), greaterThan(0L));
                            }
                            ProfileResult statsResult = searchProfileDfsPhaseResult.getDfsShardResult();
                            assertThat(statsResult.getQueryName(), equalTo("statistics"));
                        }
                    }
            );
        }
    }

    private void createIndex(String name, String vectorField) throws IOException {
        assertAcked(
                prepareCreate(name).setMapping(
                        XContentFactory.jsonBuilder()
                                .startObject()
                                .startObject("properties")
                                .startObject(vectorField)
                                .field("type", "dense_vector")
                                .field("dims", KNN_DIM)
                                .field("index", true)
                                .field("similarity", "cosine")
                                .endObject()
                                .endObject()
                                .endObject()
                )
        );
    }

}
```

### Explanation

1. **Extracting `vectorField` initialization:**
   - Reused the variable `vectorField` instead of directly using the string "vector" in multiple places.

2. **Extracting `new float[] { randomFloat(), randomFloat(), randomFloat() }`:**
   - Created a variable `randomVector` to hold the array of random floats, making the code cleaner and reducing repetition. This pattern was used in both the main query section and the list generation section.

These refactorings improve the code's readability and maintainability by reducing redundancy and making it easier to understand the purpose of repeated expressions.