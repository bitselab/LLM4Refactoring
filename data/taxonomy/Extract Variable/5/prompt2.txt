Extract variable refactorings are frequently employed to remove repeated expressions to improve readability and reusablity.
##################################################
An extract variable refactoring pattern is to extract repeated expressions as a new variable within the same method. Here is an example of the extract variable refactoring that follows this pattern.
The source code before refactoring is:
```
private Map<String, User> getIssueUsersByLogin(Issue issue) {
    Map<String, User> usersByLogin = Maps.newHashMap();
    if (issue.assignee() != null) {
        usersByLogin.put(issue.assignee(), userIndex.getByLogin(issue.assignee()));
    }
    String reporter = issue.reporter();
    if (reporter != null) {
        usersByLogin.put(reporter, userIndex.getByLogin(reporter));
    }
    return usersByLogin;
}
```
The source code after refactoring is:
```
private Map<String, User> getIssueUsersByLogin(Issue issue) {
    Map<String, User> usersByLogin = Maps.newHashMap();
    String assignee = issue.assignee();
    if (assignee != null) {
        usersByLogin.put(assignee, userIndex.getByLogin(assignee));
    }
    String reporter = issue.reporter();
    if (reporter != null) {
        usersByLogin.put(reporter, userIndex.getByLogin(reporter));
    }
    return usersByLogin;
}
```
In this example, the developer extracted the expression "issue.assignee()" as new variable "assignee".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential extract variable refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
@Test
void testMaxAttempts() {
    int maxAttempts = 13;
    long maxBackoffMS = 3L;
    final ExponentialDelayRestartBackoffTimeStrategy restartStrategy =
            new ExponentialDelayRestartBackoffTimeStrategy(
                    new ManualClock(), 1L, maxBackoffMS, 1.2, 10L, 0.25, maxAttempts);

    for (int i = 0; i <= maxAttempts; i++) {
        assertThat(restartStrategy.canRestart()).isTrue();
        restartStrategy.notifyFailure(failure);
        new ManualClock().advanceTime(Duration.ofMillis(maxBackoffMS + 1));
    }
    assertThat(restartStrategy.canRestart()).isFalse();
}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.