Extract variable refactorings are frequently employed to remove repeated expresssions to improve readability and reusability.
##################################################
An extract variable refactoring pattern is to extract repeated expressions as a new variable within the same method. Here is an example of the extract variable refactoring that follows this pattern.
The source code before refactoring is:
```
private Map<String, User> getIssueUsersByLogin(Issue issue) {
    Map<String, User> usersByLogin = Maps.newHashMap();
    if (issue.assignee() != null) {
        usersByLogin.put(issue.assignee(), userIndex.getByLogin(issue.assignee()));
    }
    String reporter = issue.reporter();
    if (reporter != null) {
        usersByLogin.put(reporter, userIndex.getByLogin(reporter));
    }
    return usersByLogin;
}
```
The source code after refactoring is:
```
private Map<String, User> getIssueUsersByLogin(Issue issue) {
    Map<String, User> usersByLogin = Maps.newHashMap();
    String assignee = issue.assignee();
    if (assignee != null) {
        usersByLogin.put(assignee, userIndex.getByLogin(assignee));
    }
    String reporter = issue.reporter();
    if (reporter != null) {
        usersByLogin.put(reporter, userIndex.getByLogin(reporter));
    }
    return usersByLogin;
}
```
In this example, the developer extracted the expression "issue.assignee()" as new variable "assignee".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential extract variable refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
@EndPoint(method = PUT, path = API_PATH, permission = CONFIG_EDIT_PERM)
public void updateConfigSetFile(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    ensureConfigSetUploadEnabled();

    final String configSetName = req.getPathTemplateValues().get("name");
    boolean overwritesExisting = configSetService.checkConfigExists(configSetName);
    boolean requestIsTrusted =
            isTrusted(req.getUserPrincipal(), coreContainer.getAuthenticationPlugin());

    // Get upload parameters

    String singleFilePath = req.getPathTemplateValues().getOrDefault(FILEPATH_PLACEHOLDER, "");
    boolean allowOverwrite = req.getParams().getBool(ConfigSetParams.OVERWRITE, true);
    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);
    final InputStream inputStream = ensureNonEmptyInputStream(req);

    String fixedSingleFilePath = singleFilePath;
    if (fixedSingleFilePath.charAt(0) == '/') {
        fixedSingleFilePath = fixedSingleFilePath.substring(1);
    }
    if (fixedSingleFilePath.isEmpty()) {
        throw new SolrException(
                SolrException.ErrorCode.BAD_REQUEST,
                "The file path provided for upload, '" + singleFilePath + "', is not valid.");
    } else if (ZkMaintenanceUtils.isFileForbiddenInConfigSets(fixedSingleFilePath)
            || FileTypeMagicUtil.isFileForbiddenInConfigset(inputStream.readAllBytes())) {
        throw new SolrException(
                SolrException.ErrorCode.BAD_REQUEST,
                "The file type provided for upload, '"
                        + singleFilePath
                        + "', is forbidden for use in configSets.");
    } else if (cleanup) {
        // Cleanup is not allowed while using singleFilePath upload
        throw new SolrException(
                SolrException.ErrorCode.BAD_REQUEST,
                "ConfigSet uploads do not allow cleanup=true when file path is used.");
    } else {
        // Create a node for the configuration in config
        // For creating the baseNode, the cleanup parameter is only allowed to be true when
        // singleFilePath is not passed.
        createBaseNode(configSetService, overwritesExisting, requestIsTrusted, configSetName);
        configSetService.uploadFileToConfig(configSetName, fixedSingleFilePath, inputStream.readAllBytes(), allowOverwrite);
    }
}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.