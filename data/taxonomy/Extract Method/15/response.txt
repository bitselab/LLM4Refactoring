In the provided code snippet, there is a clear refactoring opportunity to extract a method due to repeated code in the methods `getGenericType(Field field)` and `getGenericType(Parameter parameter)`. Both methods perform very similar tasks: they inspect either a `Field` or a `Parameter` to determine its generic type and return the class of the generic type, or `Object.class` if it's not a generic type.

The common code pattern that could be extracted into a separate method is the resolution of the generic type from a `Type` object. Hereâ€™s how the code could be refactored:

### Original Code Snippet:
```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    public Class<?> getGenericType(Field field) {
        Type generic = field.getGenericType();
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }
        return Object.class;
    }

    public Class<?> getGenericType(Parameter parameter) {
        Type generic = parameter.getType();
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }
        return Object.class;
    }

}
```

### Refactored Code Snippet:
```java
package org.mockito.internal.util.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.Parameter;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class GenericMaster {

    public Class<?> getGenericType(Field field) {
        return resolveGenericType(field.getGenericType());
    }

    public Class<?> getGenericType(Parameter parameter) {
        return resolveGenericType(parameter.getType());
    }

    private Class<?> resolveGenericType(Type generic) {
        if (generic instanceof ParameterizedType) {
            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                return (Class<?>) actual;
            } else if (actual instanceof ParameterizedType) {
                return (Class<?>) ((ParameterizedType) actual).getRawType();
            }
        }
        return Object.class;
    }
}
```

In the refactored code, the repeated logic for resolving the generic type has been extracted into the `resolveGenericType(Type generic)` method. This makes both `getGenericType(Field field)` and `getGenericType(Parameter parameter)` more succinct and emphasizes their core functionality, which improves code maintainability and readability.