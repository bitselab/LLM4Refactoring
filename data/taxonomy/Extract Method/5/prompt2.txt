Extract method refactorings are frequently employed to decompose complex methods to improve readability.
##################################################
An extract method refactoring pattern is to extract a piece of code as a new method to decompose this method. Here is an example of the extract method refactoring that follows this pattern.
The source code before refactoring is:
```
public class SourceResolver {

    protected Url canonicalizeUrl(@NotNull String url, @Nullable Url baseUrl, boolean trimFileScheme, int sourceIndex, boolean baseUrlIsFile) {
        if (trimFileScheme && url.startsWith(StandardFileSystems.FILE_PROTOCOL_PREFIX)) {
            return Urls.newLocalFileUrl(FileUtil.toCanonicalPath(VfsUtilCore.toIdeaUrl(url, true).substring(StandardFileSystems.FILE_PROTOCOL_PREFIX.length()), '/'));
        } else if (baseUrl == null || url.contains(URLUtil.SCHEME_SEPARATOR) || url.startsWith("data:") || url.startsWith("blob:") || url.startsWith("javascript:")) {
            return Urls.parseEncoded(url);
        }
        String path = url;
        if (url.charAt(0) != '/') {
            String basePath = baseUrl.getPath();
            if (baseUrlIsFile) {
                int lastSlashIndex = basePath.lastIndexOf('/');
                StringBuilder pathBuilder = new StringBuilder();
                if (lastSlashIndex == -1) {
                    pathBuilder.append('/');
                } else {
                    pathBuilder.append(basePath, 0, lastSlashIndex + 1);
                }
                path = pathBuilder.append(url).toString();
            } else {
                path = basePath + '/' + url;
            }
        }
        path = FileUtil.toCanonicalPath(path, '/');
        if (baseUrl.getScheme() == null && baseUrl.isInLocalFileSystem()) {
            return Urls.newLocalFileUrl(path);
        }
        if (isAbsolute(path)) {
            VirtualFile file = LocalFileFinder.findFile(path);
            if (file != null) {
                if (absoluteLocalPathToSourceIndex == null) {
                    // must be linked, on iterate original path must be first
                    absoluteLocalPathToSourceIndex = createStringIntMap(rawSources.size());
                    sourceIndexToAbsoluteLocalPath = new String[rawSources.size()];
                }
                absoluteLocalPathToSourceIndex.put(path, sourceIndex);
                sourceIndexToAbsoluteLocalPath[sourceIndex] = path;
                String canonicalPath = file.getCanonicalPath();
                if (canonicalPath != null && !canonicalPath.equals(path)) {
                    absoluteLocalPathToSourceIndex.put(canonicalPath, sourceIndex);
                }
                return Urls.newLocalFileUrl(path);
            }
        }
        return new UrlImpl(baseUrl.getScheme(), baseUrl.getAuthority(), path, null);
    }

}
```
The source code after refactoring is:
```
public class SourceResolver {

    protected Url canonicalizeUrl(@NotNull String url, @Nullable Url baseUrl, boolean trimFileScheme, int sourceIndex, boolean baseUrlIsFile) {
        if (trimFileScheme && url.startsWith(StandardFileSystems.FILE_PROTOCOL_PREFIX)) {
            return Urls.newLocalFileUrl(FileUtil.toCanonicalPath(VfsUtilCore.toIdeaUrl(url, true).substring(StandardFileSystems.FILE_PROTOCOL_PREFIX.length()), '/'));
        } else if (baseUrl == null || url.contains(URLUtil.SCHEME_SEPARATOR) || url.startsWith("data:") || url.startsWith("blob:") || url.startsWith("javascript:")) {
            return Urls.parseEncoded(url);
        }
        String path = canonicalizePath(url, baseUrl, baseUrlIsFile);
        if (baseUrl.getScheme() == null && baseUrl.isInLocalFileSystem()) {
            return Urls.newLocalFileUrl(path);
        }
        if (isAbsolute(path)) {
            VirtualFile file = LocalFileFinder.findFile(path);
            if (file != null) {
                if (absoluteLocalPathToSourceIndex == null) {
                    // must be linked, on iterate original path must be first
                    absoluteLocalPathToSourceIndex = createStringIntMap(rawSources.size());
                    sourceIndexToAbsoluteLocalPath = new String[rawSources.size()];
                }
                absoluteLocalPathToSourceIndex.put(path, sourceIndex);
                sourceIndexToAbsoluteLocalPath[sourceIndex] = path;
                String canonicalPath = file.getCanonicalPath();
                if (canonicalPath != null && !canonicalPath.equals(path)) {
                    absoluteLocalPathToSourceIndex.put(canonicalPath, sourceIndex);
                }
                return Urls.newLocalFileUrl(path);
            }
        }
        return new UrlImpl(baseUrl.getScheme(), baseUrl.getAuthority(), path, null);
    }

    private static String canonicalizePath(String url, Url baseUrl, boolean baseUrlIsFile) {
        String path = url;
        if (url.charAt(0) != '/') {
            String basePath = baseUrl.getPath();
            if (baseUrlIsFile) {
                int lastSlashIndex = basePath.lastIndexOf('/');
                StringBuilder pathBuilder = new StringBuilder();
                if (lastSlashIndex == -1) {
                    pathBuilder.append('/');
                } else {
                    pathBuilder.append(basePath, 0, lastSlashIndex + 1);
                }
                path = pathBuilder.append(url).toString();
            } else {
                path = basePath + '/' + url;
            }
        }
        path = FileUtil.toCanonicalPath(path, '/');
        return path;
    }

}
```
In this example, the developer extracted the following statements:
```
String path = url;
if (url.charAt(0) != '/') {
    String basePath = baseUrl.getPath();
    if (baseUrlIsFile) {
        int lastSlashIndex = basePath.lastIndexOf('/');
        StringBuilder pathBuilder = new StringBuilder();
        if (lastSlashIndex == -1) {
            pathBuilder.append('/');
        } else {
            pathBuilder.append(basePath, 0, lastSlashIndex + 1);
        }
        path = pathBuilder.append(url).toString();
    } else {
        path = basePath + '/' + url;
    }
}
path = FileUtil.toCanonicalPath(path, '/');
return path;
```
as new method "canonicalizePath".
##################################################
As a developer, imagine your team leader requests you to review a piece of code to identify potential extract method refactoring opportunities that follows the refactoring pattern above. The original code snippet is as follows:
```
class ConfigureOperatorLevelStateTtlJsonITCase extends JsonPlanTestBase {

    @Test
    void testDifferentStateTtlForDifferentOneInputOperator() throws Exception {
        String dataId =
                TestValuesTableFactory.registerRowData(
                        Arrays.asList(
                                GenericRowData.of(1, StringData.fromString("Tom"), 1, 199.9d),
                                GenericRowData.of(2, StringData.fromString("Jerry"), 2, 99.9d),
                                GenericRowData.of(1, StringData.fromString("Tom"), 1, 199.9d),
                                GenericRowData.of(3, StringData.fromString("Tom"), 1, 29.9d),
                                GenericRowData.of(4, StringData.fromString("Olivia"), 1, 100d),
                                GenericRowData.of(4, StringData.fromString("Olivia"), 1, 100d),
                                GenericRowData.of(2, StringData.fromString("Jerry"), 2, 99.9d),
                                GenericRowData.of(5, StringData.fromString("Michael"), 3, 599.9d),
                                GenericRowData.of(6, StringData.fromString("Olivia"), 3, 1000d)));
        createTestSourceTable(
                "Orders",
                new String[] {
                        "`order_id` INT", "`buyer` STRING", "`quantity` INT", "`amount` DOUBLE"
                },
                null,
                getProperties(dataId, 1, "2s"));

        createTestNonInsertOnlyValuesSinkTable(
                "OrdersStats",
                "`buyer` STRING",
                "`ord_cnt` BIGINT",
                "`quantity_cnt` BIGINT",
                "`total_amount` DOUBLE");
        compileSqlAndExecutePlan("INSERT INTO OrdersStats \n"
                        + "SELECT buyer, COUNT(1) AS ord_cnt, SUM(quantity) AS quantity_cnt, SUM(amount) AS total_amount FROM (\n"
                        + "SELECT *, ROW_NUMBER() OVER(PARTITION BY order_id, buyer, quantity, amount ORDER BY proctime() ASC) AS rk FROM Orders) tmp\n"
                        + "WHERE rk = 1\n"
                        + "GROUP BY buyer", (Function<String, String>) json -> {
            try {
                JsonNode target = JsonTestUtils.readFromString(json);
                JsonTestUtils.setExecNodeStateMetadata(
                        target, "stream-exec-deduplicate", 0, 6000L);
                JsonTestUtils.setExecNodeStateMetadata(
                        target, "stream-exec-group-aggregate", 0, 9000L);
                return JsonTestUtils.writeToString(target);
            } catch (IOException e) {
                throw new TableException("Cannot modify compiled json plan.", e);
            }
        }).await();

        // with deduplicate state's TTL as 6s, record (+I,2,Jerry,2,99.9) will duplicate itself
        // +-------------------+--------------------------------------+------------------+
        // |        data       | diff(last_arriving, first_arriving) | within_time_range |
        // +-------------------+-------------------------------------+-------------------+
        // | 1,Tom,1,199.9     |                 4s                  |         Y         |
        // +-------------------+-------------------------------------+-------------------+
        // | 2,Jerry,2,99.9    |                 10s                  |        N         |
        // +-------------------+-------------------------------------+-------------------+
        // | 3,Tom,1,29.9      |                 0s                  |         Y         |
        // +-------------------+-------------------------------------+-------------------+
        // | 4,Olivia,1,100    |                 2s                  |         Y         |
        // +-------------------+-------------------------------------+-------------------+
        // | 5,Michael,3,599.9 |                 0s                  |         Y         |
        // +-------------------+-------------------------------------+-------------------+
        // | 6,Olivia,3,1000   |                 0s                  |         Y         |
        // +-------------------+-------------------------------------+-------------------+

        // with group-aggregate state's TTL as 9s, record (+I,2,Jerry,2,99.9) will be counted twice
        List<String> expected =
                Arrays.asList(
                        "+I[Tom, 2, 2, 229.8]",
                        "+I[Jerry, 1, 2, 99.9]",
                        "+I[Jerry, 1, 2, 99.9]",
                        "+I[Olivia, 2, 4, 1100.0]",
                        "+I[Michael, 1, 3, 599.9]");
        assertResult(expected, TestValuesTableFactory.getResultsAsStrings("OrdersStats"));
    }

}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.