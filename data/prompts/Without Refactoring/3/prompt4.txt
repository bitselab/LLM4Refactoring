As a developer, imagine your team leader requests you to review a piece of code to identify potential refactoring opportunities for the following nine types of refactoring: [Extract Class, Extract Method, Extract Variable, Inline Method, Inline Variable, Rename Attribute, Rename Method, Rename Parameter, Rename Variable]. The original code snippet is as follows:
```
package org.apache.commons.lang3.compare;

import java.io.Serializable;
import java.util.Comparator;

/**
 * Compares Object's {@link Object#toString()} values.
 *
 * This class is stateless.
 *
 * @since 3.10
 */
public final class ObjectToStringComparator implements Comparator<Object>, Serializable {

    /**
     * Singleton instance.
     *
     * This class is stateless.
     */
    public static final ObjectToStringComparator INSTANCE = new ObjectToStringComparator();

    /**
     * For {@link Serializable}.
     */
    private static final long serialVersionUID = 1L;

    @Override
    public int compare(final Object o1, final Object o2) {
        if (o1 == null && o2 == null) {
            return 0;
        }
        if (o1 == null) {
            return 1;
        }
        if (o2 == null) {
            return -1;
        }
        final String string1 = o1.toString();
        final String string2 = o2.toString();
        // No guarantee that toString() returns a non-null value, despite what Spotbugs thinks.
        if (string1 == null && string2 == null) {
            return 0;
        }
        if (string1 == null) {
            return 1;
        }
        if (string2 == null) {
            return -1;
        }
        return string1.compareTo(string2);
    }
}
```
If there are any refactoring opportunities, please do it and generate the refactored code. Otherwise, simply state that no refactoring is necessary.